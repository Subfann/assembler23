;==============================================================
 .386
 .model flat,stdcall
 option casemap:none
;========================================================
;include \masm32\include\windows.inc
;include \masm32\include\masm32rt.inc

; falls masm32 nicht auf C: installiert ist, aus dem Intranet
; das Verzeichnis masm32 nach H: kopieren
; dann aber H: vor die include-Dateien schreiben!

include \masm32\include\masm32.inc
include \masm32\include\kernel32.inc

include \masm32\macros\macros.asm

includelib \masm32\lib\kernel32.lib
includelib \masm32\lib\masm32.lib


.data
	
zahl1 dw 4
zahl2 dd 1


zahl3 dw 5
zahl4 dd 6




zahl5 dw 4
zahl6 dd 2



zahl7 dw 2
zahl8 dd 3


.code
main:


;1. Subtraktion

	;1.1 im 16-Bit-Format

		;1.1.1 Subtraktion eines Registeroperanden und eines Direktoperanden (einer Zahl)
			;ax - 2 (5 - 2)
			mov ax, 0
			mov ax, 5
			sub ax, 2


		;1.1.2 Subtraktion von 2 Register-Operanden
			;ax - bx (7 - 4) =3  erg in ax
			mov ax, 7
			mov bx, 4
			sub ax, bx

		;1.1.3 Subtraktion von einem Registeroperanden und einem Speicheroperanden (der Speicheroperand soll dabei im Daten-Segment vereinbart sein)
			;ax - var (8 - 4var = 4) erg in ax
			mov ax, 8
			sub ax, zahl1

	;1.2 im 32-Bit-Format

		;1.2.1 Subtraktion eines Registeroperanden und eines Direktoperanden (einer Zahl)
			;eax - 6 (9 - 6)
			mov eax, 0
			mov eax, 9
			sub eax, 6

		;1.2.2 Subtraktion von 2 Register-Operanden
			;eax - ebx (5 - 4) =1 erg in eax gespeichert
			mov eax, 5
			mov ebx, 4
			sub eax, ebx

		;1.2.3 Subtraktion von einem Registeroperanden und einem Speicheroperanden (der Speicheroperand soll dabei im Daten-Segment vereinbart sein)
			;eax - var (4 - 1var = 3) erg in eax gespeichert
			mov eax, 4
			sub eax, zahl2


;2.Vergleich von zwei Zahlen

	;Vergleichen Sie (Laden Sie die entsprechenden Operanden vor dem Vergleich jeweils mit geeignetenWerten.):

		;2.1 zwei 16-Bit- Register
			;ax u bx (5 u 2)
			mov ax, 0
			mov bx, 0
			mov ax, 5  
			mov bx, 2
			cmp ax, bx      ;ziel größer als quelle

			;ax u bx (5 u 5)
			mov ax, 0
			mov bx, 0
			mov ax, 5  
			mov bx, 5
			cmp ax, bx      ;ziel gleich als quelle

			;ax u bx (2 u 5)
			mov ax, 0
			mov bx, 0
			mov ax, 2  
			mov bx, 5
			cmp ax, bx      ;ziel kleiner als quelle




		;2.2 16-Bit-Register mit einem 16-Bit-Speicheroperanden
			;ax u var (7 u 5var)
			mov ax, 0
			mov ax, 7
			cmp ax, zahl3      ;ziel größer als quelle

			;ax u var (5 u 5var)
			mov ax, 0
			mov ax, 5
			cmp ax, zahl3      ;ziel gleich als quelle

			;ax u var (2 u 5var)
			mov ax, 0
			mov ax, 2
			cmp ax, zahl3      ;ziel gkleiner als quelle

			

		;2.3 zwei 32-Bit-Register
			;eax u ebx (7 u 3)
			mov eax, 0
			mov ebx, 0
			mov eax, 7  
			mov ebx, 3
			cmp eax, ebx      ;ziel größer als quelle

			;eax u ebx (7 u 7)
			mov eax, 0
			mov ebx, 0
			mov eax, 7  
			mov ebx, 7
			cmp eax, ebx      ;ziel gleich als quelle

			;eax u ebx (3 u 7)
			mov eax, 0
			mov ebx, 0
			mov eax, 3  
			mov ebx, 7
			cmp eax, ebx      ;ziel kleiner als quelle




		;2.4 32-Bit-Register mit einem 32-Bit-Speicheroperanden
			;eax u var (8 u 6var)
			mov ax, 0
			mov ax, 8
			cmp ax, zahl3      ;ziel größer als quelle

			;ax u var (6 u 6var)
			mov ax, 0
			mov ax, 6
			cmp ax, zahl3      ;ziel gleich als quelle

			;ax u var (3 u 6var)
			mov ax, 0
			mov ax, 3
			cmp ax, zahl3      ;ziel gkleiner als quelle


	;Führen Sie die Vergleiche für alle drei Fälle (Ziel größer, gleich, kleiner als Quelle) durch und überprüfen Sie die Flagbeeinflussung im Speicher, hinsichtlich der erwarteten Werte:	; status zero  carry 	;   1	  0		1		Ziel < Quelle	;   0	  1		0		Ziel = Quelle	;   0     0		0		Ziel > Quelle;3. Multiplikation	;3.1 im 16-Bit-Format

		;3.1.1 der 2. Faktor ist ein Registeroperand
			;ax * bx (2*3=6)
			mov ax, 0
			mov bx, 0
			mov bx, 2
			mov ax, 3
			mul bx       ;=6 in ax


		;3.1.2 der 2. Faktor ist ein Speicheroperand (im Datensegment)
			;ax * var (3*4var=12)
			mov ax, 0
			mov ax, 3
			mul zahl5  ;=12 in ax




	;3.2 im 32-Bit-Format

		;3.2.1 der 2. Faktor ist ein Registeroperand
			;eax * ebx (3*3=9)
			mov eax, 0
			mov ebx, 0
			mov ebx, 3
			mov eax, 3
			mul ebx       ;=9 in eax

		;3.2.2 der 2. Faktor ist ein Speicheroperand (im Datensegment)
			;eax * var (4*2var=8)
			mov eax, 0
			mov eax, 4
			mul zahl6     ;=8 in eax




;4. Division

	;4.1 im 16-Bit-Format

		;4.1.1 der 2. Faktor ist ein Registeroperand
			;ax / bx (6/3 = 2)
			mov dx, 0
			mov ax, 6
			mov bx, 3
			div bx        ;ax= ax:bx     erg in ax gespeichert


		;4.1.2 der 2. Faktor ist ein Speicheroperand (im Datensegment)
			;ax / var (4/2var =2)
			mov dx, 0
			mov ax 4
			mov bx, zahl7		; zahl7 var (2)nach bx reg kopiert
			div bx			;=2 in ax 


	;4.2 im 32-Bit-Format

		;4.2.1 der 2. Faktor ist ein Registeroperand
			;eax / ebx (8/2 =4)
			mov edx, 0
			mov eax, 8
			mov ebx, 2
			div ebx        ;eax= eax:ebx     erg in eax gespeichert


		;4.2.2 der 2. Faktor ist ein Speicheroperand (im Datensegment)
			;eax / var (9/3var =3)
			mov edx, 0
			mov eax 9
			mov ebx, zahl8		; zahl8 var (3)nach ebx reg kopiert
			div ebx 		;=3 in eax


exit 
end main